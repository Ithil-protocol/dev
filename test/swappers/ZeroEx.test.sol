// SPDX-License-Identifier: BUSL-1.1
pragma solidity =0.8.17;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { Test } from "forge-std/Test.sol";
import { IZeroExRouter } from "../../src/interfaces/external/0x/IZeroExRouter.sol";
import { ZeroEx } from "../../src/swappers/ZeroEx.sol";
import { StringUtils } from "../utils/StringUtils.sol";
import { console2 } from "forge-std/console2.sol";

contract ZeroExTest is Test {
    ZeroEx internal immutable swapper;

    address internal constant router = 0xDef1C0ded9bec7F1a1670819833240f027b25EfF;
    IERC20 internal constant weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
    IERC20 internal constant usdt = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);
    IERC20 internal constant usdc = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);
    IERC20 internal constant rdnt = IERC20(0x0C4681e6C0235179ec3D4F4fc4DF3d14FDD96017);
    address internal constant wethWhale = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;
    address internal constant usdtWhale = 0xf89d7b9c864f589bbF53a82105107622B35EaA40;
    address internal constant rdntWhale = 0xAc7e734Bc86f945eB772dFB6Aee934c01A683F0E;

    string internal constant rpcUrl = "ARBITRUM_RPC_URL";
    uint256 internal constant blockNumber = 65822669;

    constructor() {
        uint256 forkId = vm.createFork(vm.envString(rpcUrl), blockNumber);
        vm.selectFork(forkId);

        swapper = new ZeroEx(router);
    }

    function testZeroExUsdtToUsdc() public {
        // test transaction https://arbiscan.io/tx/0x57caa9727f30ee1380efd314983021d9b00cc68a081984f56132a0faaf2b6690
        uint256 amount = 7856579;
        uint256 minOut = 7777300;

        vm.deal(usdtWhale, 1 ether);
        vm.prank(usdtWhale);
        usdt.transfer(address(this), amount);

        // solhint-disable max-line-length
        IZeroExRouter.Transformation[] memory transformations = new IZeroExRouter.Transformation[](3);
        transformations[0].deploymentNonce = 19;
        transformations[0].data = StringUtils.fromHex(
            "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000077e1c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000000000000000077e1c3000000000000000000000000000000000000000000000000000000000076ac14000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002bfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000064ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );
        transformations[1].deploymentNonce = 17;
        transformations[1].data = StringUtils.fromHex(
            "000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000000077f252000000000000000000000000af5889d80b0f6b2850ec5ef8aad0625788eeb903"
        );
        transformations[2].deploymentNonce = 16;
        transformations[2].data = StringUtils.fromHex(
            "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000"
        );
        // solhint-enable max-line-length

        usdt.approve(address(swapper), amount);
        swapper.swap(address(usdt), address(usdc), amount, minOut, abi.encode(transformations));

        assertTrue(usdt.balanceOf(address(swapper)) == 0);
        assertTrue(usdc.balanceOf(address(swapper)) == 0);
        assertTrue(usdt.balanceOf(address(this)) == 0);
        assertTrue(usdc.balanceOf(address(this)) >= minOut);
    }

    function testZeroExRdntToUsdt() public {
        // test transaction https://arbiscan.io/tx/0xc72afc627304ba5b61873f6d9711cf30ea7542628d263bfb857d84fc3418cd09
        uint256 amount = 657534655922591857225;
        uint256 minOut = 206510222;

        vm.deal(rdntWhale, 1 ether);
        vm.prank(rdntWhale);
        rdnt.transfer(address(this), amount);

        // solhint-disable max-line-length
        IZeroExRouter.Transformation[] memory transformations = new IZeroExRouter.Transformation[](2);
        transformations[0].deploymentNonce = 19;
        transformations[0].data = StringUtils.fromHex(
            "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c4681e6c0235179ec3d4f4fc4df3d14fdd96017000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb900000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000023a5205dcb2ec97a49000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000023a5205dcb2ec97a49000000000000000000000000000000000000000000000000000000000c4f188e000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000420c4681e6c0235179ec3d4f4fc4df3d14fdd96017000bb882af49447d8a07e3bd95bd0d56f35241523fbab10001f4fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );
        transformations[1].deploymentNonce = 16;
        transformations[1].data = StringUtils.fromHex(
            "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c4681e6c0235179ec3d4f4fc4df3d14fdd96017000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000"
        );
        // solhint-enable max-line-length

        rdnt.approve(address(swapper), amount);
        swapper.swap(address(rdnt), address(usdt), amount, minOut, abi.encode(transformations));

        assertTrue(usdt.balanceOf(address(swapper)) == 0);
        assertTrue(rdnt.balanceOf(address(swapper)) == 0);
        assertTrue(rdnt.balanceOf(address(this)) == 0);
        assertTrue(usdt.balanceOf(address(this)) >= minOut);
    }
}
