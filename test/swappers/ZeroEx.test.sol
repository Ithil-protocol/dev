// SPDX-License-Identifier: BUSL-1.1
pragma solidity =0.8.17;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { Test } from "forge-std/Test.sol";
import { IZeroExRouter } from "../../src/interfaces/external/0x/IZeroExRouter.sol";
import { ZeroEx } from "../../src/swappers/ZeroEx.sol";
import { StringEncoder } from "../helpers/StringEncoder.sol";

contract ZeroExTest is Test {
    ZeroEx internal immutable swapper;

    address internal constant router = 0xDef1C0ded9bec7F1a1670819833240f027b25EfF;
    IERC20 internal constant weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
    IERC20 internal constant usdc = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);
    IERC20 internal constant usdt = IERC20(0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9);
    address internal constant wethWhale = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;
    address internal constant usdcWhale = 0x8b8149Dd385955DC1cE77a4bE7700CCD6a212e65;
    address internal constant usdtWhale = 0xf89d7b9c864f589bbF53a82105107622B35EaA40;

    string internal constant rpcUrl = "ARBITRUM_RPC_URL";
    uint256 internal constant blockNumber = 66038570;

    constructor() {
        uint256 forkId = vm.createFork(vm.envString(rpcUrl), blockNumber);
        vm.selectFork(forkId);

        swapper = new ZeroEx(router);
    }

    function testZeroExUsdtToUsdc() public {
        // test transaction https://arbiscan.io/tx/0x57caa9727f30ee1380efd314983021d9b00cc68a081984f56132a0faaf2b6690
        uint256 amount = 7856579;
        uint256 minOut = 7777300;

        vm.deal(usdtWhale, 1 ether);
        vm.prank(usdtWhale);
        usdt.transfer(address(this), amount);

        // solhint-disable max-line-length
        IZeroExRouter.Transformation[] memory transformations = new IZeroExRouter.Transformation[](3);
        transformations[0].deploymentNonce = 19;
        transformations[0].data = StringEncoder.fromHex(
            "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000077e1c3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000000000000000077e1c3000000000000000000000000000000000000000000000000000000000076ac14000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002bfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000064ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );
        transformations[1].deploymentNonce = 17;
        transformations[1].data = StringEncoder.fromHex(
            "000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000000000000000000000000000000000000077f252000000000000000000000000af5889d80b0f6b2850ec5ef8aad0625788eeb903"
        );
        transformations[2].deploymentNonce = 16;
        transformations[2].data = StringEncoder.fromHex(
            "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000"
        );
        // solhint-enable max-line-length

        usdt.transfer(address(swapper), amount);
        swapper.swap(address(usdt), address(usdc), amount, minOut, abi.encode(transformations));

        assertTrue(usdt.balanceOf(address(swapper)) == 0);
        assertTrue(usdc.balanceOf(address(swapper)) == 0);
        assertTrue(usdt.balanceOf(address(this)) == 0);
        assertTrue(usdc.balanceOf(address(this)) >= minOut);
    }

    function testZeroExUsdcToWeth() public {
        uint256 amount = 10000000;
        uint256 minOut = 6033724576921351;

        vm.deal(usdcWhale, 1 ether);
        vm.prank(usdcWhale);
        usdc.transfer(address(this), amount);

        // solhint-disable max-line-length
        // API https://arbitrum.api.0x.org/swap/v1/quote?sellToken=0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8&buyToken=0x82af49447d8a07e3bd95bd0d56f35241523fbab1&sellAmount=10000000
        IZeroExRouter.Transformation[] memory transformations = new IZeroExRouter.Transformation[](3);
        transformations[0].deploymentNonce = 19;
        transformations[0].data = StringEncoder.fromHex(
            "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc800000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000012556e6973776170563300000000000000000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000156fa3fa147707000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e592427a0aece92de3edee1f18e0157c058615640000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002bff970a61a04b1ca14834a43f5de4533ebddb5cc80001f482af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
        );
        transformations[1].deploymentNonce = 17;
        transformations[1].data = StringEncoder.fromHex(
            "00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000000000000000000000000000000015a9ccbb2fd19b000000000000000000000000af5889d80b0f6b2850ec5ef8aad0625788eeb903"
        );
        transformations[2].deploymentNonce = 16;
        transformations[2].data = StringEncoder.fromHex(
            "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000"
        );
        // solhint-enable max-line-length

        usdc.transfer(address(swapper), amount);
        swapper.swap(address(usdc), address(weth), amount, minOut, abi.encode(transformations));

        assertTrue(usdc.balanceOf(address(swapper)) == 0);
        assertTrue(weth.balanceOf(address(swapper)) == 0);
        assertTrue(usdc.balanceOf(address(this)) == 0);
        assertTrue(weth.balanceOf(address(this)) >= minOut);
    }
}
